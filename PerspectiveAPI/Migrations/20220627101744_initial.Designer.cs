// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PerspectiveAPI.Data;

#nullable disable

namespace PerspectiveAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220627101744_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PerspectiveAPI.Models.Domain.Post", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePhysicalPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimePosted")
                        .HasColumnType("datetime2");

                    b.HasKey("PostId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = "1",
                            AuthorId = "1",
                            Header = "First post",
                            RawHtml = "<h1>Это реальный пост, ребята</h1>",
                            Slug = "first-post",
                            TimePosted = new DateTime(2022, 6, 27, 10, 17, 44, 197, DateTimeKind.Utc).AddTicks(9527)
                        });
                });

            modelBuilder.Entity("PerspectiveAPI.Models.Domain.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            Password = "l3pGm/0Ko0x2QqMoYQ1usREWVhulorpu8kt3VhzKjmw=",
                            Role = 2,
                            Salt = new byte[] { 102, 239, 166, 130, 89, 85, 90, 248, 132, 153, 108, 206, 12, 157, 144, 56 },
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("PerspectiveAPI.Models.Domain.Post", b =>
                {
                    b.HasOne("PerspectiveAPI.Models.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });
#pragma warning restore 612, 618
        }
    }
}
