// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PerspectiveAPI.Data;

#nullable disable

namespace PerspectiveAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PerspectiveAPI.Models.Domain.Post", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePhysicalPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("RawHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimePosted")
                        .HasColumnType("datetime2");

                    b.HasKey("PostId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = "1",
                            AuthorId = "1",
                            Header = "Первый пост",
                            IsVisible = false,
                            RawHtml = "<h1>Это реальный пост, ребята</h1>",
                            Slug = "pervyii-post",
                            TimePosted = new DateTime(2022, 7, 30, 8, 42, 57, 377, DateTimeKind.Utc).AddTicks(2138)
                        },
                        new
                        {
                            PostId = "2",
                            AuthorId = "1",
                            Header = "Второй post",
                            IsVisible = false,
                            RawHtml = "<hr /> <h5>Это реально???</h5> <h1>Да, это реально)</h1>",
                            Slug = "vtoroii-post",
                            TimePosted = new DateTime(2022, 7, 30, 8, 42, 57, 377, DateTimeKind.Utc).AddTicks(2630)
                        });
                });

            modelBuilder.Entity("PerspectiveAPI.Models.Domain.User", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            Password = "AAeeyDhadGAGkJKH9j1Ji6E40L6EHHfu2H4XjE5lYig=",
                            Role = 2,
                            Salt = new byte[] { 189, 108, 204, 176, 69, 234, 21, 226, 116, 31, 54, 44, 72, 76, 124, 228 },
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = "2",
                            Password = "kxDDElhKw9Wybk4/d8F9nAESNUHo1FtZbZTp2G3pyWc=",
                            Role = 0,
                            Salt = new byte[] { 210, 253, 114, 231, 214, 1, 66, 117, 40, 32, 184, 96, 212, 185, 6, 252 },
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("PerspectiveAPI.Models.Domain.Post", b =>
                {
                    b.HasOne("PerspectiveAPI.Models.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });
#pragma warning restore 612, 618
        }
    }
}
